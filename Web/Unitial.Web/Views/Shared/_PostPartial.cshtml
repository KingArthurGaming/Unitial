@model PostViewModel
<div class="container" style="margin-left:25px" id=@Model.PostId>
    <div class="row">

        <div class="col-lg-6 offset-lg-3">

            <div class="cardbox shadow-lg bg-white" style="height:auto">

                <div class="cardbox-heading">

                    <div class="media m-3 pt-3">
                        <div class="d-flex mr-0">
                            <a href="/User/Profile?uesrId=@Model.AuthorId">
                                <img class="img-fluid rounded-circle" src="@Model.UserImageUrl" alt="User">
                            </a>
                        </div>
                        <div class="media-body">
                            @if (User.Identity.Name == Model.UserName)
                            {
                                <button onclick="Delete('@Model.PostId')" class="btn btn-lg btn-outline-dark"
                                        style="width:80px; height:29px; font-weight:500; float:right;" value="Delete">
                                    Delete
                                </button>
                            }
                            <a href="/User/Profile?uesrId=@Model.AuthorId">
                                <p class="m-0">@Model.UserFullName</p>
                            </a>

                            <small>
                                <span>
                                    <i class="icon ion-md-time"></i> @Model.PostedOn.ToString("dd/MM/yyyy")
                                </span>
                            </small>
                        </div>
                    </div>
                </div>

                <div class="cardbox-item">
                    <img class="img-fluid" style="padding-bottom:30px" src="@Model.PostImageUrl" alt="Image">
                </div>
                @if (Model.HaveLikes)
                {

                    @if (!Model.IsLikedByThisUser)
                    {
                        <div class="cardbox-base notliked">
                            <ul class="float-right">
                            </ul>
                            <ul class="float-left">
                                <button onclick="Like('@Model.PostId')">
                                    <li><a><i class="fa fa-thumbs-up notliked"></i></a></li>
                                </button>
                                <li>
                                    <a>
                                        <span class="id">@Model.Likes</span>
                                        <span style="margin-left:4px">Likes</span>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="cardbox-base liked">
                            <ul class="float-right">
                            </ul>
                            <ul class="float-left">
                                <button onclick="Like('@Model.PostId')">
                                    <li><a><i class="fa fa-thumbs-up liked"></i></a></li>
                                </button>
                                <li>
                                    <a>
                                        <span class="id">@Model.Likes</span>
                                        <span style="margin-left:4px">Likes</span>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                }
                @if (Model.HaveComments)
                {
                    <button onclick="Comment('@Model.PostId')" class="comment-btn" value="Comment">| Send</button>
                    <div class="cardbox-comments">
                        <div class="search">
                            <input placeholder="Write a comment" class="commentInput" name="Comment" type="text" pattern="^.{1,65}$" />
                        </div>
                    </div>
                    <div class="all-Comments">
                        @if (Model.Caption != null)
                        {
                            <div class="cardbox-comments">
                                <span class="comment-avatar float-left">
                                    <a href="">
                                        <img class="rounded-circle" src="@Model.UserImageUrl">
                                    </a>
                                </span>
                                <div class="comment">
                                    <b class="comment-text">@Model.Caption</b>
                                </div>
                            </div>
                        }

                        @foreach (var comment in Model.Comments)
                        {
                            Html.RenderPartial("_CommentPartial", comment);
                        }
                    </div>
                }
            </div>

        </div>
    </div>
</div>
<script>
    function Delete(id) {

        let xhttp = new XMLHttpRequest();

        let element = document.getElementById(id);
        element.parentNode.removeChild(element);
        xhttp.open("Post", `/Post/DeletePost?id=${id}`, true);
        xhttp.send();

        console.log(id);
    }
</script>
<script>
    function Like(id) {

        let xhttp = new XMLHttpRequest();


        let likeCount = document.getElementById(id).getElementsByClassName("id")[0];
        let likeButton = document.getElementById(id).getElementsByClassName("fa")[0];

        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                if (this.responseText == "Yes") {
                    likeCount.textContent = parseInt(likeCount.textContent) - 1;
                    likeButton = likeButton.classList.replace("liked", "notliked");
                }
                else {

                    likeCount.textContent = parseInt(likeCount.textContent) + 1;
                    likeButton = likeButton.classList.replace("notliked", "liked");

                }
            }
        };


        xhttp.open("Post", `/Post/LikePost?Id=${id}`, true);
        xhttp.send();

        console.log(id + " - Is Liked");
    }
</script>
<script>
    function Comment(id) {

        let xhttp = new XMLHttpRequest();

            let comment = document.getElementById(id).getElementsByClassName("commentInput")[0].value;
            if ( comment.length > 0 && comment.length < 65) {
                document.getElementById(id).getElementsByClassName("commentInput")[0].value = "";

                document.getElementById(id).getElementsByClassName("all-Comments")[0].innerHTML +=
                    `<div class="cardbox-comments">
                            <span class="comment-avatar float-left">
                                <a href="">
                                    <img class="rounded-circle" src="@Model.UserImageUrl">
                                </a>
                            </span>
                            <div class="comment">
                                <b class="comment-text">${comment}</b>
                            </div>
                        </div>`;

               xhttp.open("Post", `/Comment/CreateComment?id=${id}&comment=${comment}`, true);
               xhttp.send();

            }
            else {
                let comment = document.getElementById(id).getElementsByClassName("cardbox-comments")[0];

                comment.insertAdjacentHTML('afterend', `<p class="danger">The comment need to be between 1 and 65.</p>`);
            }
    }
</script>